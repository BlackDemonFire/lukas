name: Continuous Deployment

on:
  push:
    branches:
      - master

jobs:
  docker:
    name: Publish Docker image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [x86_64, aarch64]


    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@v14

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v8


      - name: Build Docker image
        id: build
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          nix build --print-build-logs .#docker
          [ ! -L result ] && exit 1
          echo "path=$(readlink -f result)" >> "$GITHUB_OUTPUT"

      - name: Upload image
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ matrix.arch }}
          path: ${{ steps.build.outputs.path }}
          if-no-files-found: error
          retention-days: 3

  push:
    name: Push image
    needs: docker
    runs-on: ubuntu-latest
        
    permissions:
      packages: write
        
    env:
      REGISTRY: ghcr.io
      USERNAME: ${{ github.actor }}

    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4
       
      - name: Determine image name
        run: |
          echo "IMAGE_NAME=${REPOSITORY,,}" >> "$GITHUB_ENV"
        env:
          REPOSITORY: '${{ github.repository }}'

      - name: Download images
        uses: actions/download-artifact@v4
        with:
          path: images

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ github.token }}

      - name: Push to registry
        env:
          TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        run: |
          set -eu

          architectures=("x86_64" "aarch64")
          for arch in "${architectures[@]}"; do
            docker load < images/container-"$arch"/*.tar.gz
            docker tag blackdemonfire/lukas:latest "$TAG"-"$arch"
            docker push ${{ env.TAG }}-"$arch"
          done

          docker manifest create "$TAG" \
            --amend "$TAG"-x86_64 \
            --amend "$TAG"-aarch64

          docker manifest push "$TAG"
